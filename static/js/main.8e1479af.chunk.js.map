{"version":3,"sources":["sortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Sorter","props","state","bars","solved","solving","this","makeArr","num","document","getElementById","value","i","push","Math","floor","random","setState","arr","start","end","sleep","partition","new_index","quickSort","length","id","key","hole","flag","k","swap","len","auxArr","slice","mergeHelp","bar","sorter","insertionSort","bubbleSort","mergeSort","width","type","min","max","className","defaultValue","onClick","map","number","index","name","style","height","solver","partitionI","pivot","x","y","temp","aux","mid","merge","j","React","Component","ms","Promise","resolve","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e1479af.chunk.js","sourcesContent":["import React from 'react';\nimport \"./sortingVis.css\";\n\nexport default class Sorter extends React.Component {\n    constructor(props) { \n        super(props);\n        this.state={\n            bars: [],\n            solved: true,\n            solving: false\n        };\n    }\n    componentDidMount(){\n        this.makeArr();\n    }\n    makeArr() {\n    if (this.state.solving===false){\n    const bars = [];\n    let num = document.getElementById(\"myRange\").value;\n    for (let i=0; i<num; i++){\n        bars.push(Math.floor(Math.random() * 625) + 5 ) ;\n     \n    }\n    this.setState({bars});\n    let solved = false;\n    this.setState({solved})\n    }}\n\n    async quickSort(arr,start,end) {\n        \n        if (start >= end){\n            return;\n        }\n        await sleep(10)\n        let new_index =  await this.partition(arr,start,end);\n        this.setState({bars:arr})\n        await sleep(10)\n        await this.quickSort(arr,start,new_index-1);\n        this.setState({bars:arr})\n        await sleep(10)\n        await this.quickSort(arr,new_index+1,end);\n        this.setState({bars:arr})\n       \n        \n    }\n    async insertionSort(arr){\n        for (let i=1; i<arr.length;i++){\n            document.getElementById(i).id = \"green\";\n            \n            let key = arr[i];\n            let hole=i;\n            while (hole>=0 && arr[hole-1]>key){\n                arr[hole]=arr[hole-1];\n                hole--;\n                \n                this.setState({arr})\n                if (document.getElementById(hole)){\n                document.getElementById(hole).id = \"red\";\n                await sleep(1)\n                if (document.getElementById(\"red\")){\n                document.getElementById(\"red\").id = hole;\n                }\n            }}\n            if (document.getElementById(\"green\")){\n            document.getElementById(\"green\").id = i;\n            }\n            arr[hole] = key;\n          \n            }\n        return\n    }\n\n    async bubbleSort(arr){\n        let flag;\n        for (let i = 0; i <arr.length ; i++){\n            flag = 0;\n            \n            for (let k = 0; k<arr.length-i-1 ; k++){\n                if (document.getElementById(arr.length-i)){\n                document.getElementById(arr.length-i).id = \"green\";}\n                if (arr[k] > arr[k+1]){\n                    if (document.getElementById(k)){\n                    document.getElementById(k).id = \"red\";}\n                    await this.swap(arr,k,k+1)\n            \n                    this.setState({bars:arr})\n                    flag = 1;\n                }\n                if (document.getElementById(\"red\")){\n                    document.getElementById(\"red\").id = k;\n                }\n                if (document.getElementById(\"green\")){\n                document.getElementById(\"green\").id = arr.length-i;}\n            }\n            \n            if (flag === 0){\n                return;\n            }\n        }\n    }\n    async mergeSort(arr) {\n        let len = arr.length\n        if (len < 2){\n            return;\n        }\n        const auxArr = arr.slice();\n        await this.mergeHelp(arr,0,len-1,auxArr);\n        this.setState({bar:arr});\n    \n    }\n\n    async solver(sorter){\n        if (!this.state.solving && !this.state.solved){\n            this.setState({solving:true})\n            if (sorter===\"insertion\"){\n                await this.insertionSort(this.state.bars)\n            }else if (sorter===\"quickSort\"){\n                await this.quickSort(this.state.bars,0,this.state.bars.length-1);\n            }else if (sorter===\"bubbleSort\"){\n                await this.bubbleSort(this.state.bars)\n            }else if (sorter===\"mergeSort\"){\n                await this.mergeSort(this.state.bars)\n            }\n        \n        \n \n        this.setState({solved:true})\n        this.setState({solving:false})\n        }\n    }\n    \n\n    render(){\n    const {bars} = this.state;\n    let width;\n    if (bars.length>130){\n        width = 1;\n    }else if (bars.length>100){\n        width = 1.75;\n    }else if(bars.length> 50){\n        width = 3;\n    }else if(bars.length>20){\n        width = 10;\n    }else if(bars.length>10){\n        width = 50;\n    }else {\n        width = 80;\n    }\n\n    return (\n        <div>\n        <nav>\n        Sorting Visualizer\n        <input type=\"range\" min=\"10\" max=\"200\" className=\"slider\" id=\"myRange\" defaultValue=\"100\" onClick={()=>this.makeArr()}></input>\n        </nav>\n        <span className=\"line\"></span>\n        <div className=\"array-container\">\n           {bars.map((number,index) => (\n               <div className=\"array-bar\" name={index} key={index} id={index} \n               style={{height:`${number}px`, width: `${width}px`}}></div>\n           ))}\n        </div>\n        <footer>\n        <span className=\"line\"></span>\n        <button onClick={()=>this.makeArr()} id=\"newArr\">Generate New Array</button>\n        <button id=\"quickSort\" onClick={()=>this.solver(\"quickSort\")}>Quick Sort</button>\n        <button id=\"insertionSort\" onClick={()=>this.solver(\"insertion\")}>Insertion Sort</button>\n        <button id=\"bubbleSort\" onClick={()=>this.solver(\"bubbleSort\")}>Bubble Sort</button>\n        <button id=\"mergeSort\" onClick ={() => this.solver(\"mergeSort\")}>Merge Sort</button>\n        </footer>\n        </div>\n    );\n}\n// Helper functions\nasync partition(arr,start,end) {\n  \n    let partitionI = start;\n    let pivot = arr[end];\n    await sleep(20)\n    document.getElementById(end).id = \"green\";\n    document.getElementById(partitionI).id = \"blue\"\n    for (let i = start; i < end ; i++){\n        if (arr[i] < pivot){\n            if (document.getElementById(i)){\n            document.getElementById(i).id = \"red\";}\n            \n            await this.swap(arr,partitionI,i)\n            \n            if (document.getElementById(\"red\")){\n            document.getElementById(\"red\").id = i;}\n\n            if(document.getElementById(\"blue\")){\n            document.getElementById(\"blue\").id = partitionI;}\n            partitionI++\n            \n            if (document.getElementById(partitionI)){\n            document.getElementById(partitionI).id = \"blue\";}\n        }\n    }\n    await this.swap(arr,partitionI,end);\n    document.getElementById(\"green\").id = end\n    if(document.getElementById(\"blue\")){\n        document.getElementById(\"blue\").id = partitionI;}\n    return partitionI\n}\nasync swap(arr,x,y){\n    await sleep(5);\n    let temp = arr[x];\n    arr[x] = arr[y];\n    arr[y] = temp;\n    this.setState({bars:arr})\n}\n\nasync mergeHelp(arr,start,end,aux){\n    if (start===end){\n        return;\n    }\n    const mid = Math.floor((start+end)/2);\n    await this.mergeHelp(aux,start,mid,arr);\n    await this.mergeHelp(aux,mid+1,end,arr);\n    await sleep(5)\n    await this.merge(arr,start,mid,end,aux);\n   \n}\n\nasync merge(arr,start,mid,end,aux){\n    let i= start;\n    let j = mid+1;\n    let k = start;\n    if(document.getElementById(i)){\n        document.getElementById(i).id = \"red\";}\n    if(document.getElementById(j)){\n        document.getElementById(j).id = \"blue\";}\n    this.setState({bar:arr});\n    while (i <= mid && j <= end){\n        if (aux[i] <= aux[j]){\n            if(document.getElementById(\"red\")){\n                document.getElementById(\"red\").id = i;}\n            \n            await sleep(15)\n            arr[k++] = aux[i++];\n            if(document.getElementById(i)){\n                document.getElementById(i).id = \"red\";}\n            \n        }else{\n            if (document.getElementById(\"blue\")){\n                document.getElementById(\"blue\").id = j;}\n            await sleep(15)\n            arr[k++] = aux[j++];\n            if(document.getElementById(j)){\n                document.getElementById(j).id = \"blue\";}\n            \n        }\n        this.setState({bar:arr});\n    }\n    \n    if(document.getElementById(\"red\")){\n        document.getElementById(\"red\").id = i;}\n    if (document.getElementById(\"blue\")){\n        document.getElementById(\"blue\").id = j;}\n    while (i <= mid){\n        if (document.getElementById(i)){\n        document.getElementById(i).id = \"red\";}\n       \n        await sleep(15)\n        if (document.getElementById(\"red\")){\n            document.getElementById(\"red\").id = i;}\n        arr[k++]= aux[i++];\n        this.setState({bar:arr});\n       \n    }\n    while (j<= end){\n \n        if (document.getElementById(j)){\n        document.getElementById(j).id = \"blue\";}\n        \n        \n        await sleep(15)\n        if (document.getElementById(\"blue\")){\n            document.getElementById(\"blue\").id = j;}\n        arr[k++] = aux[j++];\n        this.setState({bar:arr});\n        \n    }\n  \n}\n}\n\n\n\n\nfunction sleep(ms){\n    return new Promise(resolve => setTimeout(resolve,ms));\n}\n","import React from 'react';\nimport Sorter from './sortingVisualizer.jsx';\nimport './App.css';\nimport \"./sortingVis.css\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorter></Sorter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}